stages:
  # 下载依赖包、构建项目
  #- build
  # 代码检测
  - check
  # 准备：打包镜像，上传仓库,删除目标服务器；指定版本的容器、镜像
  #- prepare
  # 部署：传递docker-compose文件，构建容器
  - run
  - log
  - registry

sonarqube_check:
  tags:
    - default
  stage: check
  image: gradle:jdk17
  when: manual
  variables:
    SONAR_USER_HOME: "${CI_PROJECT_DIR}/.sonar"  # Defines the location of the analysis task cache
    GIT_DEPTH: "0"  # Tells git to fetch all the branches of the project, required by the analysis task
  cache:
    key: "${CI_JOB_NAME}"
    paths:
      - /app/sonarqube/cache
  script: gradle sonar
  allow_failure: true
  only:
    - merge_requests
    - dev

variables:
  # 注意：请和build.gradle下面的docker.springBootApplication.images 名称一致，版本默认都是latest
  # 容器映射的内外端口一致
  MODULE_PROJECT_NANE: $CI_PROJECT_NAME
  IMAGE_NAME: csatc/$MODULE_PROJECT_NANE
  PROJECT_VERSION: 1.0.0
  # 容器映射端口
  PORT: 8605
  IMAGE_FULL_NAME: ${DOCKER_REPOSITORY}/$IMAGE_NAME:$PROJECT_VERSION
  CONTAINER_NAME: $MODULE_PROJECT_NANE
  # 目标服务器的项目路径
  TARGET_SERVER: $DEV_IP
  ROOT_PATH: /app/$MODULE_PROJECT_NANE
  PROFILES_ACTIVE: dev
.common-ssh-script-before: &common-ssh-script-before
  - if [ "${CI_COMMIT_REF_NAME}" = "master" -o "${CI_COMMIT_REF_NAME}" = "main" ]; then
      TARGET_SERVER=${PRO_IP};
      PROFILES_ACTIVE="prod";
      PASSWORD=${PRO_PASS};
      echo "当前正在部署正式系统${TARGET_SERVER}";
    elif [ "${CI_COMMIT_REF_NAME}" = "test" ]; then
      TARGET_SERVER=${TEST_IP};
      PROFILES_ACTIVE="test";
      echo "当前正在部署测试系统${TARGET_SERVER}";
    else
      echo "当前正在部署开发环境系统${TARGET_SERVER}";
    fi
  # 添加了远程服务器的SSH密钥 （必须生成文件，否则无法访问远程主机）
  - ssh-keyscan -t rsa $TARGET_SERVER >> /root/.ssh/known_hosts

# 执行对应的脚本
deploy_run:
  image: ${DOCKER_REPOSITORY}/tool/docker/gradle-21:1.3
  tags:
    - default
  stage: run
  variables:
    GRADLE_USER_HOME: "$CI_PROJECT_DIR/.gradle"
    CACHE_KEY: $MODULE_PROJECT_NANE-repository
  when: manual
  before_script:
    - *common-ssh-script-before
    - git checkout -q $CI_COMMIT_SHA
  script:
    - gradle clean bootJar -x test
    - mv build/libs/*.jar ./bin/
    - docker-compose -f $(pwd)/bin/docker-compose.yml build -q
    - docker push $IMAGE_FULL_NAME -q
    - sshpass -p $PASSWORD ssh $USER@$TARGET_SERVER 'bash -s' < /app/dockerDelete.sh container $CONTAINER_NAME $PROJECT_VERSION
    - sshpass -p $PASSWORD ssh $USER@$TARGET_SERVER "if [ ! -d "/app/$MODULE_PROJECT_NANE/" ]; then mkdir -p /app/$MODULE_PROJECT_NANE/; fi;"
    - sshpass -p $PASSWORD scp -p $(pwd)/bin/docker-compose.yml $USER@$TARGET_SERVER:/app/$MODULE_PROJECT_NANE/
    - echo "开始发布……"
    - sshpass -p $PASSWORD ssh $USER@$TARGET_SERVER "cd /app/$MODULE_PROJECT_NANE/; 
        export DOCKER_REPOSITORY=$DOCKER_REPOSITORY;
        export IMAGE_FULL_NAME=$IMAGE_FULL_NAME; 
        export PROFILES_ACTIVE=$PROFILES_ACTIVE; 
        export PROJECT_VERSION=$PROJECT_VERSION; 
        export PORT=$PORT; 
        export IMAGE_NAME=$IMAGE_NAME; 
        export CONTAINER_NAME=$CONTAINER_NAME; 
        docker-compose pull -q; docker-compose up -d"
    - echo "发布成功，后续清理多余的镜像……"
    - sshpass -p $PASSWORD ssh $USER@$TARGET_SERVER "docker image prune -a -f"
    - echo "日志查看地址：http://$TARGET_SERVER:1000/$CONTAINER_NAME"
    - sh /app/dockerDelete.sh images ${DOCKER_REPOSITORY}/$IMAGE_NAME $PROJECT_VERSION
  cache:
    key: $CACHE_KEY
    paths:
      - .gradle/
      - build/

deploy_log:
  tags:
    - default
  stage: log
  when: manual
  variables:
    GIT_STRATEGY: none
    CI_JOB_MAX_LOG_SIZE: "100m"  # 设置日志大小限制为10兆字节
    CI_JOB_TRACE_MAX_SIZE: "100m"  # 将日志大小限制为100M
    startTime: $(date -d "1 hour ago" +"%Y-%m-%dT%H:%M:%S")
    endTime: $(date +"%Y-%m-%dT%H:%M:%S")
  before_script:
    - *common-ssh-script-before
  script:
    - echo "默认获取最近一个小时的$CONTAINER_NAME容器日志……"
    - sshpass -p $PASSWORD ssh $USER@$TARGET_SERVER "a=\$(sudo docker ps | grep $CONTAINER_NAME | awk '{print \$NF}') ; 
        sudo docker logs --since=$startTime --until=$endTime \$a"
